createdAt: "2018-06-12T08:37:49.749Z"
updatedAt: "2018-06-12T08:38:21.149Z"
type: "SNIPPET_NOTE"
folder: "3acfe59efd087551a1e7"
title: "C# Reflection Utility"
description: '''
  C# Reflection Utility
  
'''
snippets: [
  {
    name: "ObjectActivator.cs"
    mode: "C#"
    content: '''
        public class ReflectionUtil
        {
            //// https://rogerjohansson.blog/2008/02/28/linq-expressions-creating-objects/
      
            public delegate object ObjectActivator(params object[] args);
      
            public static ObjectActivator GetActivator(ConstructorInfo ctor)
            {
                var type = ctor.DeclaringType;
                var paramsInfo = ctor.GetParameters();
      
                //// create a single param of type object[]
                var param =
                    Expression.Parameter(typeof(object[]), "args");
      
                var argsExp =
                    new Expression[paramsInfo.Length];
      
                //// pick each arg from the params array
                //// and create a typed expression of them
                for (var i = 0; i < paramsInfo.Length; i++)
                {
                    Expression index = Expression.Constant(i);
                    var paramType = paramsInfo[i].ParameterType;
      
                    Expression paramAccessorExp =
                        Expression.ArrayIndex(param, index);
      
                    Expression paramCastExp =
                        Expression.Convert(paramAccessorExp, paramType);
      
                    argsExp[i] = paramCastExp;
                }
      
                //// make a NewExpression that calls the
                //// ctor with the args we just created
                var newExp = Expression.New(ctor, argsExp);
      
                //// create a lambda with the New
                //// Expression as body and our param object[] as arg
                var lambda =
                    Expression.Lambda(typeof(ObjectActivator), newExp, param);
      
                //// compile it
                var compiled = (ObjectActivator)lambda.Compile();
                return compiled;
            }
        }
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
